package frc.robot.commands.drivetrain_commands;
/*
 * Balances the robot on the Charge Station
 * Robot should start on the Charge station at an non zero pitch
 */

import edu.wpi.first.wpilibj2.command.CommandBase;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import frc.robot.Constants;
import frc.robot.subsystems.drivetrain_subsystems.*;
import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.math.MathUtil;

public class Cmd_DriveBalance extends CommandBase {
    
    private final DriveSubsystem m_driveTrain;
    private PIDController BalancePID; 
    private double maxAngle=0;
    public Cmd_DriveBalance(DriveSubsystem drive) {
        m_driveTrain = drive;
        addRequirements(m_driveTrain);
     }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        BalancePID = new PIDController(Constants.BalanceKp, Constants.BalanceKi,Constants.BalanceKd);
        BalancePID.setSetpoint(0.0);
        BalancePID.setTolerance( 5.0);
        maxAngle = 0.0;
    }

    // Called every time the scheduler runs while the command is scheduled.
    
    //@Override
    public void execute() {
        SmartDashboard.putString("Drive Cmd","DriveBalance");
        SmartDashboard.putString("Drive bal","DriveBalance running");
        if (m_driveTrain.getPitch() > maxAngle )
            maxAngle = m_driveTrain.getPitch();
//was 0.35
        double DriveSpeed = BalancePID.calculate(m_driveTrain.getPitch());
        if ( (maxAngle - m_driveTrain.getPitch())>1)
            DriveSpeed =0;
        DriveSpeed = MathUtil.clamp(DriveSpeed, -0.25, 0.25);
        
         m_driveTrain.driveMecanum(0,DriveSpeed,0);  

         SmartDashboard.putNumber("Pitch", m_driveTrain.getPitch());
         SmartDashboard.putNumber("Roll", m_driveTrain.getRoll());
         SmartDashboard.putNumber("Max Angle",maxAngle);
         SmartDashboard.putNumber("balance out", DriveSpeed);
    }

    
    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        m_driveTrain.drive(0.0, 0.0,0.0, false);
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        if (maxAngle - m_driveTrain.getPitch()>1)
        {
            SmartDashboard.putString("Drive bal","DriveBalance finished");
            return true;
        }
        if (m_driveTrain.getPitch() < -2)
            return true;
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}
